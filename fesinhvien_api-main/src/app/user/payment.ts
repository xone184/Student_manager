import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { UserService, PaymentInfo, SemesterInfo } from './user.service';
import { StudentGuardService } from './student-guard.service';
import { Router } from '@angular/router';
import { PaymentService } from '../services/payment.service';
import { AuthService } from '../auth.service';

// ƒê·ªãnh nghƒ©a interface cho VNPAY
interface VNPayRequest {
  orderInfo: string;
  amount: number;
  studentId: number;
}

interface VNPayResponse {
  paymentUrl: string;
  transactionId: string;
}

@Component({
    selector: 'app-user-payment',
    standalone: true,
    imports: [CommonModule, FormsModule],
    templateUrl: './payment.html',
    styleUrls: ['./payment.css']
})
export class UserPaymentComponent implements OnInit {
    paymentInfo: PaymentInfo | null = null;
    allPaymentInfo: PaymentInfo[] = [];
    availableSemesters: SemesterInfo[] = [];
    selectedSemester = '';
    loading = false;
    error = '';
    showAllSemesters = false;

    constructor(
        private userService: UserService,
        private studentGuard: StudentGuardService,
        private router: Router,
        private paymentService: PaymentService,
        private authService: AuthService
    ) { }

    ngOnInit() {
        // Ki·ªÉm tra studentId khi component kh·ªüi t·∫°o
        const studentId = this.getStudentId();
        if (!studentId) {
            // Th·ª≠ load d·ªØ li·ªáu v·ªõi fallback studentId = 1 n·∫øu c√≥ token
            if (this.authService.isLoggedIn()) {
                this.loadSemesters();
            } else {
                this.error = 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ID sinh vi√™n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
                return;
            }
        } else {
            this.loadSemesters();
        }
    }

    loadSemesters() {
        this.userService.getAllSemesters().subscribe({
            next: (semesters) => {
                this.availableSemesters = semesters;
                if (semesters.length > 0 && !this.selectedSemester) {
                    this.selectedSemester = semesters[0].semester;
                    this.loadPaymentInfo();
                }
            },
            error: (error) => {
                if (!this.studentGuard.handleStudentError(error)) {
                    console.error('Error loading semesters:', error);
                }
            }
        });
    }

    loadPaymentInfo() {
        this.loading = true;
        this.error = '';

        this.userService.getPaymentInfo(this.selectedSemester).subscribe({
            next: (data) => {
                console.log('Payment info loaded successfully:', data);
                // √Ånh x·∫° ƒë·ªÉ ƒë·∫£m b·∫£o paymentStatus t·ªìn t·∫°i (API c√≥ th·ªÉ tr·∫£ 'status')
                this.paymentInfo = this.mapPaymentInfo(data);
                this.loading = false;
            },
            error: (error) => {
                if (!this.studentGuard.handleStudentError(error)) {
                    console.error('Error loading payment info:', error);
                    this.error = `L·ªói khi t·∫£i th√¥ng tin h·ªçc ph√≠: ${error.status} - ${error.statusText}`;
                }
                this.loading = false;
            }
        });
    }

    loadAllPaymentInfo() {
        this.loading = true;
        this.error = '';

        this.userService.getAllPaymentInfo().subscribe({
            next: (data) => {
                console.log('All payment info loaded successfully:', data);
                // √Ånh x·∫° t·ª´ng ph·∫ßn t·ª≠ ƒë·ªÉ chu·∫©n ho√° t√™n tr∆∞·ªùng
                this.allPaymentInfo = Array.isArray(data) ? data.map(d => this.mapPaymentInfo(d)) : [];
                this.loading = false;
            },
            error: (error) => {
                if (!this.studentGuard.handleStudentError(error)) {
                    console.error('Error loading all payment info:', error);
                    this.error = `L·ªói khi t·∫£i th√¥ng tin h·ªçc ph√≠: ${error.status} - ${error.statusText}`;
                }
                this.loading = false;
            }
        });
    }

    onSemesterChange() {
        if (this.selectedSemester) {
            this.loadPaymentInfo();
        }
    }

    toggleView() {
        this.showAllSemesters = !this.showAllSemesters;
        if (this.showAllSemesters) {
            this.loadAllPaymentInfo();
        } else {
            this.loadPaymentInfo();
        }
    }

    createPayment(semester?: string) {
        if (confirm('üè¶ B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·∫°o y√™u c·∫ßu thanh to√°n cho h·ªçc k·ª≥ n√†y?')) {
            this.userService.createPayment(semester).subscribe({
                next: (response) => {
                    console.log('Payment created:', response);
                    alert('‚úÖ T·∫°o y√™u c·∫ßu thanh to√°n th√†nh c√¥ng!');
                    if (this.showAllSemesters) {
                        this.loadAllPaymentInfo();
                    } else {
                        this.loadPaymentInfo();
                    }
                },
                error: (error) => {
                    console.error('Error creating payment:', error);
                    alert('‚ùå L·ªói khi t·∫°o y√™u c·∫ßu thanh to√°n: ' + error.message);
                }
            });
        }
    }

    // Th√™m ph∆∞∆°ng th·ª©c thanh to√°n online b·∫±ng VNPAY
    payOnline(payment: PaymentInfo): void {
        // Ch·ªâ ki·ªÉm tra paymentStatus
        if (payment.paymentStatus !== 'PENDING') {
            this.error = 'Ch·ªâ c√≥ th·ªÉ thanh to√°n online cho c√°c kho·∫£n ƒëang ch·ªù!';
            return;
        }

        // Ki·ªÉm tra token tr∆∞·ªõc khi thanh to√°n
        if (!this.authService.isLoggedIn()) {
            this.error = 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
            this.router.navigate(['/login']);
            return;
        }

        let studentId = this.getStudentId();
        
        // Fallback: s·ª≠ d·ª•ng userId t·ª´ AuthService n·∫øu kh√¥ng t√¨m th·∫•y studentId
        if (!studentId && this.authService.isLoggedIn()) {
            const userId = this.authService.getCurrentUserId();
            // Chuy·ªÉn ƒë·ªïi userId th√†nh s·ªë n·∫øu c√≥ th·ªÉ
            if (typeof userId === 'string') {
                // N·∫øu userId l√† string nh∆∞ "sv005", s·ª≠ d·ª•ng m·ªôt ID s·ªë m·∫∑c ƒë·ªãnh
                // ho·∫∑c extract s·ªë t·ª´ string
                const numericId = parseInt((userId as string).replace(/\D/g, ''), 10);
                studentId = numericId > 0 ? numericId : 1; // Fallback to 1
            } else if (typeof userId === 'number' && userId > 0) {
                studentId = userId;
            } else {
                studentId = 1; // Fallback ID
            }
        }
        
        if (!studentId || studentId <= 0) {
            this.error = 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ID sinh vi√™n h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
            return;
        }

        const request: VNPayRequest = {
            orderInfo: `Thanh to√°n h·ªçc ph√≠ k·ª≥ ${payment.semester} cho sinh vi√™n ${studentId}`,
            amount: payment.totalAmount ?? payment.remainingAmount ?? 0,
            studentId: studentId
        };

        this.loading = true;
        
        this.paymentService.initiateVNPay(request).subscribe({
            next: (response: VNPayResponse) => {
                this.loading = false;
                // ƒêi·ªÅu h∆∞·ªõng t·ªõi URL VNPay
                window.location.href = response.paymentUrl;
            },
            error: (error) => {
                this.loading = false;
                console.error('Error initiating VNPay:', error);
                
                // S·ª≠ d·ª•ng error message t·ª´ service ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
                this.error = error?.message || 'L·ªói khi kh·ªüi t·∫°o thanh to√°n online';
            }
        });
    }

    // S·ª≠ d·ª•ng AuthService ƒë·ªÉ l·∫•y studentId m·ªôt c√°ch an to√†n
    private getStudentId(): number | null {
        const userId = this.authService.getCurrentUserId();
        
        // Ki·ªÉm tra xem c√≥ token h·ª£p l·ªá kh√¥ng
        if (!this.authService.isLoggedIn()) {
            return null;
        }
        
        if (userId && userId > 0) {
            return userId;
        }
        
        // Fallback: th·ª≠ l·∫•y t·ª´ StudentGuardService n·∫øu c√≥
        try {
            const guardAny = this.studentGuard as any;
            
            if (typeof guardAny.getStudentId === 'function') {
                const id = guardAny.getStudentId();
                if (typeof id === 'number' && !isNaN(id) && id > 0) {
                    return id;
                }
            }
            if (guardAny.currentStudent && typeof guardAny.currentStudent.id === 'number') {
                return guardAny.currentStudent.id;
            }
        } catch (e) {
            // B·ªè qua l·ªói
        }
        
        return null;
    }

    // H√†m √°nh x·∫°/chu·∫©n ho√° payment object t·ª´ API v·ªÅ PaymentInfo c√≥ paymentStatus
    private mapPaymentInfo(raw: any): PaymentInfo {
        if (!raw) return raw;
        // copy t·∫•t c·∫£ thu·ªôc t√≠nh, v√† ƒë·∫£m b·∫£o c√≥ paymentStatus (∆∞u ti√™n paymentStatus, n·∫øu kh√¥ng c√≥ d√πng status)
        const normalized = {
            ...raw,
            paymentStatus: raw.paymentStatus ?? raw.status ?? raw.paymentState ?? null
        };
        return normalized as PaymentInfo;
    }

    formatCurrency(amount: number): string {
        return new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND'
        }).format(amount);
    }

    getStatusBadgeClass(status: string): string {
        const statusMap: { [key: string]: string } = {
            'PAID': 'bg-green-100 text-green-700',
            'PENDING': 'bg-yellow-100 text-yellow-700',
            'FAILED': 'bg-red-100 text-red-700'
        };
        return statusMap[status] || 'bg-gray-100 text-gray-700';
    }

    getStatusText(status: string): string {
        const statusTextMap: { [key: string]: string } = {
            'PAID': '‚úÖ ƒê√£ thanh to√°n',
            'PENDING': '‚è≥ Ch·ªù thanh to√°n',
            'FAILED': '‚ùå Thanh to√°n th·∫•t b·∫°i'
        };
        return statusTextMap[status] || '';
    }

    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ clear error
    clearError(): void {
        this.error = '';
    }

    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ th·ª≠ l·∫°i load d·ªØ li·ªáu
    retryLoad(): void {
        this.error = '';
        this.ngOnInit();
    }

}